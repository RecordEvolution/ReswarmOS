#!/bin/sh

# use reagent management logger
. /usr/bin/reagent-mgmt-logger.sh

# check for *.reswarm file in /boot directory
reswmexst="/boot/"$(ls -t /boot/ | grep -E ".reswarm" | head -n1)

# if no .reswarm file is present ReswarmOS is supposed to run in "standalone" mode
if [ -z ${reswmexst} ]; then
  log_reagent_mgmt_event "INFO" "no .reswarm file found in /boot"
  exit 1
else
  log_reagent_mgmt_event "INFO" ".reswarm file ${reswmexst} found"
fi

# assemble CLI parameters
appsDir="/opt/reagent/apps"
cbldExt="tgz"
resfile="${reswmexst}"
dbfilen="reagent.db"
debuglg=""
debugMs=""
initScripts=""
logfile=""

# always use symbolic link to "active" Reagent version
reagent="/opt/reagent/ln-reagent-active"
if [ ! -L ${reagent} ]; then
  log_reagent_mgmt_event "INFO" "link ${reagent} to active binary does not exist yet"
  usebin="/opt/reagent/"$(ls /opt/reagent/ -t | grep "reagent-" | grep -v "ln-reagent" | head -n1)
  log_reagent_mgmt_event "INFO" "linking ${reagent} to ${usebin}"
  ln -s ${usebin} ${reagent}
  log_reagent_mgmt_event "INFO" "${reagent} : $(readlink -f ${reagent})"
fi

startAgent() {

  log_reagent_mgmt_event "INFO" "launching agent process"
  log_reagent_mgmt_event "INFO" "binary: ${reagent} -> $(readlink -f ${reagent})"
  #log_reagent_mgmt_event "INFO" "appsDirectory: ${appsDir}"
  #log_reagent_mgmt_event "INFO" "config: ${resfile}"
  #log_reagent_mgmt_event "INFO" "debug: true"
  
  nohup ${reagent} \
              -config ${resfile} \
              > /var/log/S97reagent.out 2> /var/log/S97reagent.err < /dev/null &
#	     -appsDirectory ${appsDir} \
#	     -debug \ 
#            -compressedBuildExtension ${cbldExt} \
#            -dbFileName ${dbfilen} \
#            -debug ${debuglg} \
#            -debugMessaging ${debugMs} \
#            -initScripts ${initScripts} \
#            -logFile ${logfile}

}

stopAgent() {

  log_reagent_mgmt_event "INFO" "preparing to kill agent process"

  # check process and get id
  prcs=$(ps aux | grep "${reagent}"  | grep -v "grep")
  prcsid=$(echo ${prcs} | awk -F ' ' '{print $1}')
  log_reagent_mgmt_event "INFO" "reagent process: ${prcs} with id: ${prcsid}"

  # send SIGTERM to process
  log_reagent_mgmt_event "INFO" "sending SIGTERM to process id ${prcsid}"
  kill -TERM ${prcsid}

  # check process once more
  prcs=$(ps aux | grep "${reagent}"  | grep -v "grep")
  prcsid=$(echo ${prcs} | awk -F ' ' '{print $2}')
  if [ -z ${prcs} ]; then

    log_reagent_mgmt_event "INFO" "reagent process successfully terminated"

  else

    log_reagent_mgmt_event "INFO" "reagent process did not terminate => waiting..."
    sleep 30

    # check process third time
    prcs=$(ps aux | grep "${reagent}"  | grep -v "grep")
    prcsid=$(echo ${prcs} | awk -F ' ' '{print $2}')
    if [ -z ${prcs} ]; then
      log_reagent_mgmt_event "INFO" "reagent process finally terminated"
    else
      log_reagent_mgmt_event "INFO" "reagent process refused to terminate => going to kill it"
      kill -KILL ${prcsid}
    fi

  fi 

}

case "$1" in

  start)
    startAgent
    ;;

  stop)
    stopAgent
    ;;
  
  restart)
    stopAgent
    startAgent
    ;;

  status)
    ps aux | grep "${reagent}"  | grep -v "grep"
    ;; 

  *)
    echo "Usage: $0 start/stop/restart/status"
    exit 1
    ;;

esac
