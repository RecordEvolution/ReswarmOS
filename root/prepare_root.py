# --------------------------------------------------------------------------- #

import argparse
import yaml
import os
import re
import math

parser = argparse.ArgumentParser(description='Produce shell script for building the root filesystem')
parser.add_argument('--configFile',type=str,help='name and path of configuration file',
                    default='./distro-config.yaml')
parser.add_argument('--shellScript',type=str,help='name and path of shell script to be written',
                    default='boot/prepare_root_filesystem.sh')
parser.add_argument('--shellType',type=str,help='name and path of shell to be used',
                    default='/bin/bash')
args = parser.parse_args()

# --------------------------------------------------------------------------- #

def create_root_fs(rootdir) :
    """
    Build up the root filesystem according to the 'Filesystem Hierarchy Standard'
    https://refspecs.linuxfoundation.org/fhs.shtml

    Args:
        rootdir (string): absolute path of build directory for root filesystem
    Return:
        None
    """


# --------------------------------------------------------------------------- #

if __name__ == "__main__" :

    # show list of arguments
    print("\n" + __file__ + "\n" + str(args) + "\n")

    # open and read configuration
    with open(args.configFile) as fin:
        config = yaml.load(fin, Loader=yaml.FullLoader)

    # check for absolute build path
    try :
        print('environment variable "RESWARMOS" = ' + os.environ['RESWARMOS'] + '\n')
        buildir = os.environ['RESWARMOS']
    except KeyError as err :
        raise KeyError( str(err)
                    + " please define RESWARMOS environment variable providing"
                    + " the absolute path for build directory" )

    # initialize shellcode as string and include logging
    shellcode = ( '#!' + args.shellType + "\n"
                + "# generated by '" + str(__file__) + "'\n\n"
                + "source log/logging.sh\n\n" )

    # build up the root filesystem
    shellcode = shellcode + "logging_message \"build root filesystem\"\n\n"
    shellcode = ( shellcode + '# build basic root filesystem\n' + '\n\n' )


    # dump all shell code into script
    with open(args.shellScript,'w') as fout :
        fout.write(shellcode)

# --------------------------------------------------------------------------- #
